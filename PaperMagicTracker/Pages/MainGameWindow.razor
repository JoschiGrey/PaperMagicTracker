@page "/MainGameWindow"
@using FilterType = Syncfusion.Blazor.DropDowns.FilterType
@using System.Globalization

@inject ILogger<MainGameWindow> _logger
@inject HttpClient _httpClient

<div class="flex-wrap overall-container">
    <div class="content-container information-holder">
        <SfButton CssClass="e-button" @onclick="() => Game.AdvanceTurn()"><span class="button-text">Advance Turncounter: @Game.TurnCount</span></SfButton>
        <hr class="divider-rounded"/>
        @*Not Implemented
            <SfButton CssClass="e-button" @onclick="AddCustomTrackerOnClick"><span class="button-text">Add Custom Tracker</span></SfButton>
        <div class="sub-container custom-track-holder">
            @for (var i = 1; i <= 2; i++)
            {
                <div class="custom-tracker">
                    <SfButton><span class="button-text">Add to event</span></SfButton>
                    <p class="no-background">Track Description</p>
                    <p class="no-background">Current State</p>
                    <hr class="divider-rounded"/>
                </div>
            }
        </div>*@
    </div>

    <div class="content-container grid-holder flex-wrap">
        @foreach (var zoneEnum in Enum.GetValues<Zones>())
        {
            <PmtDeckDataGrid @ref="@Ref" Zone="Game.GameZones[zoneEnum]" OnRowDropped="OnRowDroppedEventHandler"></PmtDeckDataGrid>
        }
    </div>

    <div class="content-container graph-holder">
        <div class="hypergeometric-calculator sub-container">

            <div>
                <SfDropDownList TItem="Zone" TValue="Zone" DataSource="@Game.GameZones.Values.ToList()" @bind-Value="@SelectedZoneForProbability">
                    <DropDownListFieldSettings Text="@nameof(Zone.Name)"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
            <div>
                <SfAutoComplete TItem="string" TValue="string" DataSource="CardTypes.AllCardTypes" FilterType="FilterType.Contains" @bind-Value="@SelectedType"></SfAutoComplete>
            </div>
            <div id="cards-drawn-numselect">
                <span>Cards Drawn</span>
                <SfNumericTextBox TValue="int" @bind-Value="Draws" Placeholder="Number of Draws" Min="0"></SfNumericTextBox>
            </div>
            <span id="prob-display">Probability: @ProbabilityCalc()</span>
        </div>
    </div>
</div>
<SfDialog ID="dialog" Width="450px" IsModal="true" @bind-Visible="@Visibility">
    <DialogTemplates>
        <Header>Failed to add the following Cards</Header>
        <Content>
            <ul>
                @foreach (var name in Game.FailedToFetchCards)
                {
                    <li>@name</li>
                }
            </ul>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Dismiss" IsPrimary="true" OnClick="@CloseDialog" />
    </DialogButtons>
    <DialogEvents OnOpen="@Validation"></DialogEvents>
</SfDialog>


<style>
    .hypergeometric-calculator {
        display: flex;
        align-items: flex-end;
        max-width: 45%;
        padding: 1%;
        justify-content: center;
    }

    #prob-display {
        padding-left: 10px;
        padding-bottom: 4px;
    }

    #cards-drawn-numselect {
        min-width: 13%;
        max-width: 20%;
    }
</style>




@code
{
    private bool Visibility { get; set; } = true;

    private string SelectedType { get; set; } = "Land";

    private int Draws { get; set; } = 1;

    private Zone SelectedZoneForProbability { get; set; } = Game.GameZones[Zones.Library];

    private string ProbabilityCalc()
    {
        if (Draws <= 0)
        {
            return "0";
        }

        var prob = SelectedZoneForProbability.GetProbabilityOfType(SelectedType, Draws);
        return prob.ToString(CultureInfo.CurrentCulture);
    }


    public Dictionary<Zones, PmtDeckDataGrid>? Grids { get; set; } = new();

    public PmtDeckDataGrid Ref
    {
        set => Grids.Add(value.Zone.Id, value);
    }

    protected override async Task OnInitializedAsync()
    {
        await CardTypes.CreateAsync(_logger, _httpClient);
    }

    public void AddCustomTrackerOnClick()
    {
        throw new NotImplementedException();
    }

    public void OnRowDroppedEventHandler((RowDragEventArgs<CardInfo>, Zone) packedArgs)
    {
        var (args, donatorZone) = packedArgs;

        var xPathByReflection = (string)args.Target.GetPropertyValue("XPath");

        if (!Zone.TryGetZone(xPathByReflection, out var receiverZone))
            return;

        if (!Grids.ContainsKey(receiverZone))
            return;

        var targetGridComponent = Grids[receiverZone];

        targetGridComponent.Zone.MoveCard(donatorZone, args.Data.First());
    }

    private void Validation(Syncfusion.Blazor.Popups.BeforeOpenEventArgs args)
    {
        if (Game.FailedToFetchCards.Count != 0) return;

        args.Cancel = true;
        this.Visibility = false;
    }

    private void CloseDialog()
    {
        this.Visibility = false;
    }
}
